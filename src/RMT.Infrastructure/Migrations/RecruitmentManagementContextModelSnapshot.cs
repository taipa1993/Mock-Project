// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RMT.Infrastructure.Data;

namespace RMT.Infrastructure.Migrations
{
    [DbContext(typeof(RecruitmentManagementContext))]
    partial class RecruitmentManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RMT.ApplicationCore.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplyPositionNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CandidateDoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InComingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<float?>("SalaryExpect")
                        .HasColumnType("real");

                    b.Property<float?>("SalaryOffer")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PositionId");

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Ha Noi",
                            ApplyPositionNote = "test",
                            CVSource = "web",
                            CandidateDoB = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(7596),
                            CandidateName = "Test",
                            Gender = "Male",
                            InComingDate = new DateTime(2020, 1, 21, 15, 16, 39, 188, DateTimeKind.Local).AddTicks(5696),
                            LevelId = 1,
                            Note = "test note",
                            PositionId = 1,
                            SalaryExpect = 10000f,
                            SalaryOffer = 20000f,
                            Status = "Not Process Yet",
                            University = "PTIT",
                            UpdateAt = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(6976)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ha Noi",
                            ApplyPositionNote = "test",
                            CVSource = "web",
                            CandidateDoB = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(9571),
                            CandidateName = "Test 2",
                            Gender = "Male",
                            InComingDate = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(9544),
                            LevelId = 2,
                            Note = "test note",
                            PositionId = 2,
                            SalaryExpect = 150000f,
                            SalaryOffer = 200000f,
                            Status = "Not Process Yet",
                            University = "PTIT",
                            UpdateAt = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(9560)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Ha Noi",
                            ApplyPositionNote = "test",
                            CVSource = "web",
                            CandidateDoB = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(9609),
                            CandidateName = "Test 3",
                            Gender = "Male",
                            InComingDate = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(9605),
                            LevelId = 3,
                            Note = "test note",
                            PositionId = 3,
                            SalaryExpect = 100000f,
                            SalaryOffer = 120000f,
                            Status = "Not Process Yet",
                            University = "PTIT",
                            UpdateAt = new DateTime(2020, 1, 21, 15, 16, 39, 189, DateTimeKind.Local).AddTicks(9607)
                        });
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Intern"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fresher"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Junior"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Senior"
                        });
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "JS"
                        });
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBackLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteArchived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteOfBOD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2020, 1, 21, 15, 16, 39, 191, DateTimeKind.Local).AddTicks(7988),
                            FullName = "AdminTest",
                            PasswordHash = "q+l3mg3u2+EYnCjgX4To3P8XfZuVXLHzzIqPD+3AkBU=",
                            Role = "Admin",
                            UpdateAt = new DateTime(2020, 1, 21, 15, 16, 39, 191, DateTimeKind.Local).AddTicks(8575),
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2020, 1, 21, 15, 16, 39, 191, DateTimeKind.Local).AddTicks(9171),
                            FullName = "HrTest",
                            PasswordHash = "q+l3mg3u2+EYnCjgX4To3P8XfZuVXLHzzIqPD+3AkBU=",
                            Role = "HR",
                            UpdateAt = new DateTime(2020, 1, 21, 15, 16, 39, 191, DateTimeKind.Local).AddTicks(9185),
                            UserName = "Hr"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2020, 1, 21, 15, 16, 39, 191, DateTimeKind.Local).AddTicks(9285),
                            FullName = "InterViewer",
                            PasswordHash = "q+l3mg3u2+EYnCjgX4To3P8XfZuVXLHzzIqPD+3AkBU=",
                            Role = "Interviewer",
                            UpdateAt = new DateTime(2020, 1, 21, 15, 16, 39, 191, DateTimeKind.Local).AddTicks(9287),
                            UserName = "Interviewer"
                        });
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.UserRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRounds");
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.CV", b =>
                {
                    b.HasOne("RMT.ApplicationCore.Entities.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("RMT.ApplicationCore.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.Round", b =>
                {
                    b.HasOne("RMT.ApplicationCore.Entities.CV", null)
                        .WithMany("Rounds")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMT.ApplicationCore.Entities.UserRound", b =>
                {
                    b.HasOne("RMT.ApplicationCore.Entities.Round", null)
                        .WithMany("UserRounds")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
